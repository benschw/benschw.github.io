<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>txt.fliglio.com</title>
		<description>foo</description>
		<link>txt.fliglio.com</link>
		<atom:link href="txt.fliglio.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Building a Jekyll App in Openstack with Heat and Puppet</title>
				<description>&lt;p&gt;I apologize in advance, because this is more &lt;em&gt;&amp;quot;stream of consciousness in a terminal&amp;quot;&lt;/em&gt; than how to correctly use either Puppet or Heat with Openstack. But there is a noticeable void in terms of community Openstack documentation, so I figure putting something out there is better then nothing... and hopefully people will comment and tell me how I &lt;em&gt;should&lt;/em&gt; be doing things.&lt;/p&gt;

&lt;p&gt;That said, here&amp;#39;s an incredibly opinionated way to use Puppet in conjunction with Heat to provision a vm to host a &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; site (or anything else you can find or build a puppet module for.) &lt;/p&gt;

&lt;p&gt;What site will we be serving you ask? Why this one of course (&lt;a href=&quot;https://github.com/benschw/txt.fliglio.com&quot;&gt;txt.fliglio.com&lt;/a&gt;)!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Get a Base Image Ready&lt;/h2&gt;

&lt;p&gt;First thing&amp;#39;s first: get a base image ready to work from. I&amp;#39;m going to use one of &lt;a href=&quot;http://cloud-images.ubuntu.com/&quot;&gt;Ubuntu&amp;#39;s cloud images&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;glance image-create \
    --name ubuntu-precise \
    --disk-format ami \
    --container-format bare \
    --is-public True \
    --copy-from \
    http://cloud-images.ubuntu.com/precise/20140116/precise-server-cloudimg-amd64-disk1.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will probably take a few minutes to load; make sure it&amp;#39;s &amp;quot;ACTIVE&amp;quot; before continuing (you can check the status with &lt;code&gt;nova image-list&lt;/code&gt;)&lt;/p&gt;

&lt;h2&gt;Adding some Heat&lt;/h2&gt;

&lt;p&gt;At this point, we can start playing with &lt;a href=&quot;https://wiki.openstack.org/wiki/Heat&quot;&gt;Heat&lt;/a&gt;. Take a look at &lt;a href=&quot;https://github.com/openstack/heat-templates&quot;&gt;some templates&lt;/a&gt; to get an idea of how this works, or just keep reading. &lt;/p&gt;

&lt;p&gt;If you&amp;#39;re like me, the idea of wrestling with user data formats and using bash scripts to build your box causes anxiety. So let&amp;#39;s build up our box with &lt;a href=&quot;http://puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;Going forward, I&amp;#39;ll be updating a &lt;a href=&quot;https://github.com/openstack/heat-templates/blob/master/hot/servers_in_existing_neutron_net.yaml&quot;&gt;hot template&lt;/a&gt; I found in Openstack&amp;#39;s &lt;a href=&quot;https://github.com/openstack/heat-templates&quot;&gt;heat templates&lt;/a&gt; github repo which I pared down to only launch a single server (&amp;quot;Server1&amp;quot;).&lt;/p&gt;

&lt;h3&gt;Making Puppet Hot&lt;/h3&gt;

&lt;p&gt;There are a number of ways to run puppet and even more ways to get puppet modules / dependencies in place. I will walk you through one (very) opinionated way. &lt;/p&gt;

&lt;p&gt;Though we will try to keep our provisioning in Puppet, a small amount of bootstrapping is still needed to kick things off. This we can provide with a brief (and more importantly generic) bash script encoded in user_data. This script will obtain a &lt;em&gt;Puppet Controller&lt;/em&gt;  with git and apply it to our vm. Ok, I just made that term up... it&amp;#39;s the name I&amp;#39;m using to describe a repo containing a &lt;code&gt;Puppetfile&lt;/code&gt; to provide &lt;code&gt;r10k&lt;/code&gt; with a list of deps, and a &lt;code&gt;default.pp&lt;/code&gt; manifest to drive provisioning the vm; here&amp;#39;s the one for our example: &lt;a href=&quot;https://github.com/benschw/puppet-txt.fliglio.com&quot;&gt;puppet-txt.fliglio.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To recap, the bootstrap shell script will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install packages (only those needed for the script)&lt;/li&gt;
&lt;li&gt;clone the controller repo&lt;/li&gt;
&lt;li&gt;grab Puppet deps with r10k&lt;/li&gt;
&lt;li&gt;run puppet apply&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our example controller (&lt;a href=&quot;https://github.com/benschw/puppet-txt.fliglio.com&quot;&gt;puppet-txt.fliglio.com&lt;/a&gt;), the &lt;code&gt;puppet apply&lt;/code&gt; command will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;clone a copy of &lt;a href=&quot;https://github.com/benschw/txt.fliglio.com&quot;&gt;txt.fliglio.com&lt;/a&gt; from github (this address is specified in our controller repo&amp;#39;s &lt;code&gt;default.pp&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;install an &lt;code&gt;upstart&lt;/code&gt; service to serve the site.&lt;/li&gt;
&lt;li&gt;start the newly configured service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s an excerpt from the modified heat template showing what the bootstrap script looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;puppet_repo&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Git repo with puppet Puppetfile and manifests&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;server1&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OS::Nova::Server&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Server1&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;get_param&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;flavor&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;get_param&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;flavor&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;key_name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;get_param&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key_name&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# admin_user: { get_param: admin_user }&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;get_resource&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;server1_port&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;user_data&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;l-Scalar-Plain&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;#!/bin/bash&lt;/span&gt;

            &lt;span class=&quot;no&quot;&gt;apt-key adv --recv-key --keyserver pool.sks-keyservers.net 4BD6EC30&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;echo &amp;quot;deb http://apt.puppetlabs.com precise main&amp;quot; &amp;gt; /etc/apt/sources.list.d/puppetlabs.list&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;echo &amp;quot;deb http://apt.puppetlabs.com precise dependencies&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list.d/puppetlabs.list&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;apt-get update&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;apt-get -y install puppet ruby1.9.1-full git&lt;/span&gt;

            &lt;span class=&quot;no&quot;&gt;gem install r10k&lt;/span&gt;

            &lt;span class=&quot;no&quot;&gt;TMP_PATH=`mktemp -d`&lt;/span&gt;

            &lt;span class=&quot;no&quot;&gt;git clone $PUPPET_REPO $TMP_PATH&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;cp $TMP_PATH/puppet/Puppetfile /etc/puppet/Puppetfile # r10k gets cranky if the Puppetfile isn&amp;#39;t here&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;cd /etc/puppet&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;r10k puppetfile install ./Puppetfile&lt;/span&gt;

            &lt;span class=&quot;no&quot;&gt;puppet apply $TMP_PATH/puppet/Manifests/default.pp&lt;/span&gt;

          &lt;span class=&quot;l-Scalar-Plain&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;l-Scalar-Plain&quot;&gt;$PUPPET_REPO&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;get_param&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;puppet_repo&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Getting ready to launch...&lt;/h3&gt;

&lt;p&gt;The last steps before we can provision our stack are...&lt;/p&gt;

&lt;p&gt;Add in an ssh key (only if you need to shell into the box):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;nova keypair-add --pub_key ~/.ssh/id_rsa.pub bens
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Identify the public and private net_id values. You can get this with &lt;code&gt;neutron&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ neutron net-list
+--------------------------------------+-----------+----------------------------------------------------+
| id                                   | name      | subnets                                            |
+--------------------------------------+-----------+----------------------------------------------------+
| 1152a93b-d221-41a7-b5be-3428ed991eb2 | net04     | 552ca915-8bb6-46bf-b29c-3e0eceeef064 10.6.40.0/22  |
| d98bc495-ac30-4136-9690-6545a8436468 | net04_ext | 4590955a-f4ac-42fa-81bf-5c730efb62b9 10.6.148.0/22 |
+--------------------------------------+-----------+----------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Identify the private_subnet_id:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ neutron subnet-list
+--------------------------------------+-------------------+---------------+------------------------------------------------+
| id                                   | name              | cidr          | allocation_pools                               |
+--------------------------------------+-------------------+---------------+------------------------------------------------+
| 4590955a-f4ac-42fa-81bf-5c730efb62b9 | net04_ext__subnet | 10.6.148.0/22 | {&amp;quot;start&amp;quot;: &amp;quot;10.6.150.2&amp;quot;, &amp;quot;end&amp;quot;: &amp;quot;10.6.151.254&amp;quot;} |
| 552ca915-8bb6-46bf-b29c-3e0eceeef064 | net04__subnet     | 10.6.40.0/22  | {&amp;quot;start&amp;quot;: &amp;quot;10.6.40.2&amp;quot;, &amp;quot;end&amp;quot;: &amp;quot;10.6.43.254&amp;quot;}   |
+--------------------------------------+-------------------+---------------+------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And make sure we have our heat template ready (download my copy &lt;a href=&quot;https://raw.github.com/benschw/puppet-txt.fliglio.com/master/demo.yml&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;That&amp;#39;s all? you mean we&amp;#39;re ready?&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s launch a stack:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;heat stack-create teststack \
    -f ./demo.yml \
    -P &amp;quot;key_name=bens;image=ubuntu-precise;flavor=m1.small;public_net_id=d98bc495-ac30-4136-9690-6545a8436468;private_net_id=1152a93b-d221-41a7-b5be-3428ed991eb2;private_subnet_id=552ca915-8bb6-46bf-b29c-3e0eceeef064;puppet_repo=https://github.com/benschw/puppet-txt.fliglio.com.git&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can figure out the public ip and navigate to it in your browser:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ nova list
+--------------------------------------+------------+---------+------------+-------------+-------------------------------+
| ID                                   | Name       | Status  | Task State | Power State | Networks                      |
+--------------------------------------+------------+---------+------------+-------------+-------------------------------+
| 773ba7bf-8aae-428b-a19c-2bce35d63db7 | Server1    | ACTIVE  | None       | Running     | net04=10.6.40.15, 10.6.150.16 |
| 2e9e994c-d2f9-4232-82bd-752ccdff346c | ubuntuinst | SHUTOFF | None       | Shutdown    | net04=10.6.40.13              |
+--------------------------------------+------------+---------+------------+-------------+-------------------------------+

$ chromium-browser 10.6.150.16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some notes...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When I ran through this example, there was no way to specify an admin_user with heat, so your ssh key will always be installed to &lt;code&gt;ec2-user&lt;/code&gt;. This option seems to be available now, so if you&amp;#39;re using a more recent version of Havana you may have better luck. &lt;/li&gt;
&lt;li&gt;It takes a while to apply the user_data, so don&amp;#39;t expect everything to be ready yet. Shelling in and running &lt;code&gt;ps -ef&lt;/code&gt; should give you some idea of how far along things are.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Heat is pretty cool (and pretty rough around the edges) and I&amp;#39;ve only scratched the surface. Everything done here could basically be accomplished with &lt;code&gt;nova&lt;/code&gt;; heat&amp;#39;s real power isn&amp;#39;t revealed until you start configuring multiple nodes with complex relationships.&lt;/p&gt;

&lt;p&gt;Puppet makes Heat even cooler though. Puppet gives you a way to make sure your application and its requirements come on line in a repeatable way. When combined with Heat and Openstack, we have a solid set of tools to make building and deploying ephemeral and immutable vms easy.&lt;/p&gt;
</description>
				<pubDate>Tue, 21 Jan 2014 08:21:55 -0600</pubDate>
				<link>txt.fliglio.com//2014/01/openstack_with_puppet_and_heat/</link>
				<guid isPermaLink="true">txt.fliglio.com//2014/01/openstack_with_puppet_and_heat/</guid>
			</item>
		
			<item>
				<title>Patching Openstack Base Image</title>
				<description>&lt;h3&gt;Import Ubuntu Cloud Image&lt;/h3&gt;

&lt;p&gt;First things first: import one of Ubuntu&amp;#39;s cloud image into OpenStack. You can find some &lt;a href=&quot;http://cloud-images.ubuntu.com/&quot;&gt;here&lt;/a&gt; or just use the same &lt;a href=&quot;http://cloud-images.ubuntu.com/precise/20140116/precise-server-cloudimg-amd64-disk1.img&quot;&gt;January 2014 Precise build&lt;/a&gt; I&amp;#39;m using.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;glance image-create \
    --name ubuntu-precise \
    --disk-format ami \
    --container-format bare \
    --is-public True \
    --copy-from \
    http://cloud-images.ubuntu.com/precise/20140116/precise-server-cloudimg-amd64-disk1.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will probably take a few minutes to load; make sure it&amp;#39;s &amp;quot;ACTIVE&amp;quot; before continuing (you can check the status with &lt;code&gt;nova image-list&lt;/code&gt;)&lt;/p&gt;

&lt;h3&gt;heat-cfntools&lt;/h3&gt;

&lt;p&gt;Why does Heat use &lt;a href=&quot;https://github.com/openstack/heat-cfntools&quot;&gt;heat-cfntools&lt;/a&gt; instead of &lt;a href=&quot;https://help.ubuntu.com/community/CloudInit&quot;&gt;CloutInit&lt;/a&gt; to apply &lt;a href=&quot;http://docs.openstack.org/user-guide/content/user-data.html&quot;&gt;user-data&lt;/a&gt;? I couldn&amp;#39;t tell you. But it does, and it doesn&amp;#39;t come with Ubuntu&amp;#39;s cloud images, so we need to add it. There are different tools for building your own base images (which you could use to include &lt;code&gt;heat-cfntools&lt;/code&gt;) but for this tutorial I&amp;#39;m going to go take the quick and dirty route: install them with CloudInit and take a snapshot to use as my base for my Heat stack.&lt;/p&gt;

&lt;p&gt;So how do we install heat-cfntools with CloudInit? With &lt;a href=&quot;http://docs.openstack.org/developer/nova/&quot;&gt;nova.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To boot our instance, we first need to figure out a network to boot it into. You can get this with &lt;code&gt;neutron&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;neutron net-list

+--------------------------------------+-----------+----------------------------------------------------+
| id                                   | name      | subnets                                            |
+--------------------------------------+-----------+----------------------------------------------------+
| 1152a93b-d221-41a7-b5be-3428ed991eb2 | net04     | 552ca915-8bb6-46bf-b29c-3e0eceeef064 10.6.40.0/22  |
| d98bc495-ac30-4136-9690-6545a8436468 | net04_ext | 4590955a-f4ac-42fa-81bf-5c730efb62b9 10.6.148.0/22 |
+--------------------------------------+-----------+----------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want the internal network, so we&amp;#39;ll use the id which corresponds to &amp;quot;net04.&amp;quot;&lt;/p&gt;

&lt;p&gt;Next we need to supply the &lt;code&gt;heat-cfntools&lt;/code&gt; install instructions to CloudInit via user data. There are a few different &lt;a href=&quot;https://help.ubuntu.com/community/CloudInit&quot;&gt;user data input formats&lt;/a&gt; available, but I&amp;#39;m going to use the &amp;quot;Cloud Config Data&amp;quot; format, which is specified by beginning your user-data with &lt;code&gt;#cloud-config&lt;/code&gt;. Here&amp;#39;s the file I made to pass to &lt;code&gt;nova boot&lt;/code&gt; later:&lt;/p&gt;

&lt;p&gt;cfntools-cloud-config.txt&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#cloud-config&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;ssh_import_id&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;steve-stevebaker&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;apt_sources&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ppa:steve-stevebaker/heat-cfntools&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;heat-cfntools&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Armed with our net id and cloud config, we can now add &lt;code&gt;heat-cfntools&lt;/code&gt; to our base image:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;nova boot --flavor m1.tiny --image ubuntu-precise --user-data ./cfntools-cloud-config.txt --nic net-id=1152a93b-d221-41a7-b5be-3428ed991eb2 ubuntuinst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After waiting a sufficient amount of time that we are sure the instance is provisioned, we can shut it down and take a &lt;a href=&quot;http://docs.openstack.org/user-guide/content/nova_manage_images.html&quot;&gt;snapshot&lt;/a&gt; to use as our Heat base image:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;nova stop ubuntuinst
nova image-create ubuntuinst ubuntu-heat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Fri, 17 Jan 2014 08:57:35 -0600</pubDate>
				<link>txt.fliglio.com//2014/01/patching-openstack-base-image/</link>
				<guid isPermaLink="true">txt.fliglio.com//2014/01/patching-openstack-base-image/</guid>
			</item>
		
			<item>
				<title>Concurrent Protractor Tests with Selenium Grid in Docker</title>
				<description>&lt;p&gt;Have you ever wished your front end testing could be sped up? Has it ever seemed like Selenium was a royal pain in the ass? Though I agree, this isn&amp;#39;t the post that will relieve those problems. What it is, is a way to make testing your Angular app &lt;em&gt;slightly&lt;/em&gt; less painful by providing light weight &lt;a href=&quot;https://code.google.com/p/selenium/wiki/Grid2&quot;&gt;Selenium grid&lt;/a&gt; node parallelization with &lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt; and &lt;a href=&quot;https://www.docker.io/&quot;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Specifically, this post will... &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show you how to run a tunable and scalable Selenium grid cluster in a single &lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; vm with &lt;a href=&quot;https://www.docker.io/&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Introduce &lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt; (and &lt;a href=&quot;https://github.com/teerapap/grunt-protractor-runner&quot;&gt;grunt-protractor-runner&lt;/a&gt;) 
into a stock &lt;a href=&quot;http://http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; generated Angular app&lt;/li&gt;
&lt;li&gt;And configure the &lt;a href=&quot;http://http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; build to run some example tests concurrently using the cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;Interested in skipping to the end?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benschw/docker-selenium-grid&quot;&gt;docker-selenium-grid&lt;/a&gt; - Docker containers and a simple orchestration script to run your grid cluster&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benschw/vagrant-selenium-grid&quot;&gt;vagrant-selenium-grid&lt;/a&gt; - Provisioning package to turn selenium grid setup into &lt;code&gt;vagrant up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benschw/protractor-demo&quot;&gt;protractor-demo&lt;/a&gt; - The demo angular app with all the crap I&amp;#39;m going to add in this post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One last note before I get started... &lt;a href=&quot;https://github.com/FMartinez4&quot;&gt;Francisco Martinez&lt;/a&gt; deserves all of the credit for figuring out how to integrate Protractor and concurrency in Grunt; I&amp;#39;m just writing up his work and cramming &lt;a href=&quot;http://txt.fliglio.com/2013/09/protyping-web-stuff-with-docker/&quot;&gt;another Docker prototype&lt;/a&gt; into a blog bost. Thanks Francisco.&lt;/p&gt;

&lt;h2&gt;Get started with Selenium Grid &lt;small&gt;(in a single vagrant vm)&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve put together two projects to supply the Selenium Grid functionality. The &lt;a href=&quot;https://github.com/benschw/docker-selenium-grid&quot;&gt;docker-selenium-grid&lt;/a&gt; project supplies Dockerfiles for two Docker containers: a hub and a Firefox node; and comes with a script to help you add start and stop the cluster or new nodes. The &lt;a href=&quot;https://github.com/benschw/vagrant-selenium-grid&quot;&gt;vagrant-selenium-grid&lt;/a&gt; project is a Vagrant wrapper for the first project which further simplifies starting a cluster to simply running &lt;code&gt;vagrant up&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To boot your cluster, simply run the following commands&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/benschw/vagrant-selenium-grid
cd vagrant-selenium-grid
vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This VM defaults to using 2gb of ram, but this can easily be tuned by tweaking the &lt;code&gt;Vagrantfile&lt;/code&gt; before running &lt;code&gt;vagrant up&lt;/code&gt;. It will run three firefox nodes by default, but you can tweak this by shelling into the Vagrant vm and interacting with the cluster via &lt;code&gt;~/docker-selenium-grid/grid.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to make sure it works, install &lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;protractor&lt;/a&gt; and run &lt;code&gt;./test.sh&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;npm install -g protractor
./test.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Why Docker?&lt;/h4&gt;

&lt;p&gt;Docker provide&amp;#39;s lighweight virtualization. In other words, your laptop is probably capable of driving a handfull of browsers at once, but not a handfull of VMs. Docker gives you to encapsulation of a VM with (almost) none of the overhead. It does require a Linux kernel however, which is why i&amp;#39;ve recommended running your grid inside a Vagrant vm.&lt;/p&gt;

&lt;p&gt;Running Linux? Skip the VM and run &lt;a href=&quot;https://github.com/benschw/docker-selenium-grid&quot;&gt;docker-selenium-grid&lt;/a&gt; on your host (you&amp;#39;ll just have to &lt;a href=&quot;http://docs.docker.io/en/latest/installation/ubuntulinux/&quot;&gt;install Docker&lt;/a&gt; first.)&lt;/p&gt;

&lt;h2&gt;Concurrent Protractor Testing&lt;/h2&gt;

&lt;h3&gt;Yo Angular!&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ll assume you&amp;#39;ve used Yeoman before, but just in case - here&amp;#39;s how to get it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;sudo npm install -g yo
sudo npm install -g grunt-cli
sudo npm install -g bower
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that you have the basics, lets use our new tools to generate an angular app:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;mkdir protractor-demo
cd protractor-demo

npm install generator-angular

yo angular # go ahead and &amp;quot;Y&amp;quot; everything
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sets up &lt;a href=&quot;http://http://yeoman.io/&quot;&gt;Yeoman&amp;#39;s&lt;/a&gt; opinionated default angular app. Deps are installed with &lt;a href=&quot;http://bower.io/&quot;&gt;bower&lt;/a&gt; and a build script is provided that can be run with &lt;a href=&quot;http://gruntjs.com/&quot;&gt;grunt&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Introducing Protractor&lt;/h3&gt;

&lt;p&gt;Now lets start adding in Protractor.&lt;/p&gt;

&lt;p&gt;Install the npm deps:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;sudo npm install -g protractor
npm install protractor --save-dev
npm install grunt-protractor-runner --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Add some tests and Update your build&lt;/h4&gt;

&lt;p&gt;At this point you can decide if you want to follow along and patch your &lt;code&gt;Gruntfile.js&lt;/code&gt; by hand, or just grab a copy from the &lt;a href=&quot;https://github.com/benschw/protractor-demo&quot;&gt;protractor-demo&lt;/a&gt; project. Additionally, I&amp;#39;ve included &lt;a href=&quot;https://github.com/benschw/protractor-demo/raw/master/scenario.tar.bz2&quot;&gt;scenario.tar.bz2&lt;/a&gt; which holds the example tests we will be wiring up.&lt;/p&gt;

&lt;p&gt;The quick way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;wget -N https://raw.github.com/benschw/protractor-demo/master/Gruntfile.js
wget -qO- https://github.com/benschw/protractor-demo/raw/master/scenario.tar.bz2 | tar -C ./test/ -xjvf -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;What are the changes?&lt;/h4&gt;

&lt;p&gt;Add in your Protractor test wiring after the &amp;quot;karma&amp;quot; section:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;protractor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//configFile: &amp;#39;node_modules/protractor/referenceConf.js&amp;#39;, // Default config file&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;keepAlive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If false, the grunt process stops when the test fails.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;noColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If true, protractor will not use colors in its output.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;%= connect.dist.options.port %&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//config for all protractor tasks&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;feature1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;configFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test/scenario/conf/featureList1.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Target-specific config file&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;feature2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;configFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test/scenario/conf/featureList2.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Target-specific config file&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Provide the &lt;code&gt;getIpAddress()&lt;/code&gt; function at the top of your file. Since your grid is running in a VM, we need to give it more than &lt;code&gt;localhost&lt;/code&gt; to target:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getIpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ifaces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;networkInterfaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;processDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;IPv4&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ipAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;ipAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ifaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ifaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;processDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Reference our two test features in the &amp;quot;concurrent&amp;quot; section:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;protractor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;protractor:feature1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;protractor:feature2&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the &amp;quot;connect&amp;quot; section, update &amp;quot;connect.options&amp;quot; to use &lt;code&gt;hostname: &amp;#39;0.0.0.0&amp;#39;&lt;/code&gt;, and &amp;quot;connect.dist&amp;quot; to use &lt;code&gt;port: 9002&lt;/code&gt; &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Change this to &amp;#39;0.0.0.0&amp;#39; to access the server from outside.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;livereload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35729&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;%= yeoman.dist %&amp;gt;&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And last but not least, add a new task at the bottom of the file so we can run these bad boys:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;   &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ptr&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean:server&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;connect:dist&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;concurrent:protractor&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Run the tests... Fast!&lt;/h4&gt;

&lt;p&gt;Assuming all our updates made it in and Yeoman&amp;#39;s Angular generator hasn&amp;#39;t changed, we should now be able to run tests for our two test features concurrently:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;grunt ptr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope it worked for you, and I hope this helped.&lt;/p&gt;
</description>
				<pubDate>Wed, 08 Jan 2014 09:27:27 -0600</pubDate>
				<link>txt.fliglio.com//2014/01/protractor/</link>
				<guid isPermaLink="true">txt.fliglio.com//2014/01/protractor/</guid>
			</item>
		
			<item>
				<title>Orchestrating docker with Go</title>
				<description>&lt;h2&gt;dockit&lt;/h2&gt;

&lt;p&gt;I hacked together an app named &lt;a href=&quot;https://github.com/benschw/dockit&quot; target=&quot;_blank&quot;&gt;dockit&lt;/a&gt; using &lt;a href=&quot;http://golang.org/&quot; target=&quot;_blank&quot;&gt;Go&lt;/a&gt; in order to manage a simple environment; one with webapps and a reverse proxy to route traffic to them.&lt;/p&gt;

&lt;p&gt;This is not supposed to be a general-purpose tool, but rather an example of how wiring up Docker environments using Go is...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testable: a testing framework is built in&lt;/li&gt;
&lt;li&gt;Easy to read: idiomatic style that is almost universally followed, making for a terse, highly readable ecosystem&lt;/li&gt;
&lt;li&gt;Easy to maintain: I'm assuming you were doing this work in bash before&lt;/li&gt;
&lt;li&gt;Portable: really, we're only talking about Linux with Docker, so a single statically linked binary is as portable as you can get&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;So get some ideas here (or use this as a starting point) and go build your own toolkit to codify (no pun intended) the conventions, opinions, and nuances of your environment in a format that you can maintain and test.&lt;/p&gt;

&lt;p&gt;All of this info is repeated on the project page, so if you want to dive right in, &lt;a href=&quot;https://github.com/benschw/dockit&quot; target=&quot;_blank&quot;&gt;go there now.&lt;/a&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;p&gt;By default, &lt;em&gt;dockit&lt;/em&gt; looks for a config.json file in your current directory, connects using unix:///var/run/docker.sock, and keeps track of running containers with &quot;pid&quot; files in /var/run/dockit-containers.&lt;/p&gt;

&lt;p&gt;You can define services for your environment in the config file, and specify ports, environment variables, and dependency services (which are translated into links.)&lt;/p&gt;

&lt;h4&gt;Example Environment&lt;/h4&gt;

&lt;p&gt;Included in this repo, is an example config to build an environment with a webapp (the included &lt;a href=&quot;https://github.com/benschw/dockit/tree/master/webapp-ex&quot; target=&quot;_blank&quot;&gt;webapp-ex/&lt;/a&gt;) fronted by a reverse proxy (&lt;a href=&quot;https://github.com/dotcloud/hipache&quot; target=&quot;_blank&quot;&gt;Hipache&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The config specifies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the webapp (&quot;WebApp&quot; service) container should link in the hipache/redis (&quot;Hipache&quot; service) container&lt;/li&gt;
&lt;li&gt;which ports to expose (in the link and externally)&lt;/li&gt;
&lt;li&gt;an environment variable for the webapp to use as a host name when registering with Hipache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The webapp entry point script (&lt;a href=&quot;https://github.com/benschw/dockit/blob/master/webapp-ex/start.sh&quot; target=&quot;_blank&quot;&gt;webapp-ex/start.sh&lt;/a&gt;) uses the link and host env var to register the webapp with Hipache and to deregister on shutdown.&lt;/p&gt;

&lt;p&gt;Here is a copy of `config.json` from our example environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;Hipache&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Image&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;stackbrew/hipache&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Ports&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;80&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;6379&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;WebApp&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Image&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;benschw/go-webapp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Deps&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hipache&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Env&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;HOST&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;webapp.local&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(the image &lt;em&gt;benschw/go-webapp&lt;/em&gt; was built from the contents of the &lt;a href=&quot;https://github.com/benschw/dockit/tree/master/webapp-ex&quot; target=&quot;_blank&quot;&gt;webapp-ex directory&lt;/a&gt;)&lt;/p&gt;

&lt;h4&gt;Run the example&lt;/h4&gt;

&lt;p&gt;Pull the example containers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo docker pull stackbrew/hipache
sudo docker pull benschw/go-webapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Start the Services:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo ./dockit -service Hipache -start
sudo ./dockit -service WebApp -start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start up the &lt;em&gt;Hipache&lt;/em&gt; service and then the &lt;em&gt;WebApp&lt;/em&gt; service, and it will register the private ip:port of  the &lt;em&gt;WebApp&lt;/em&gt; container with Hipache (see &lt;a href=&quot;https://github.com/benschw/dockit/blob/master/webapp-ex/start.sh&quot; target=&quot;_blank&quot;&gt;webapp-ex/start.sh&lt;/a&gt;) under the name &lt;em&gt;webapp.local&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;add &quot;127.0.0.1  webapp.local&quot; to your &quot;/etc/hosts&quot; file, and the example webapp should be available at &lt;a href=&quot;http://webapp.local&quot; target=&quot;_blank&quot;&gt;http://webapp.local&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Stop the example&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo ./dockit -service WebApp -stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will only stop the &lt;em&gt;WebApp&lt;/em&gt; container (and deregister from Hipache); Hipache is still running. To stop it too, run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo ./dockit -service Hipache -stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the containers are still there in a &quot;stopped&quot; state, and a subsequent &lt;em&gt;-start&lt;/em&gt; will run new instances.&lt;/p&gt;

&lt;h2&gt;Thoughts&lt;/h2&gt;

&lt;p&gt;I can't stress enough that dockit is not supposed to be a useful app, but rather something to get you thinking about how you can add testability and maintainability to your environment (and maybe to help you figure out how to make use of &lt;a href=&quot;https://github.com/fsouza/go-dockerclient&quot; target=&quot;_blank&quot;&gt;fsouza's Go client for Docker&lt;/a&gt;.)&lt;/p&gt; 

&lt;p&gt;Hopefully it can help you add some stability to your environment's wiring.&lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;If (like me) this is your first foray into Go, here's &lt;a href=&quot;https://gist.github.com/benschw/7873555&quot; target=&quot;_blank&quot;&gt;a gist&lt;/a&gt; to help you build the examples.&lt;/p&gt;
</description>
				<pubDate>Wed, 18 Dec 2013 12:22:05 +0000</pubDate>
				<link>txt.fliglio.com//2013/12/orchestrating-docker-with-go/</link>
				<guid isPermaLink="true">txt.fliglio.com//2013/12/orchestrating-docker-with-go/</guid>
			</item>
		
			<item>
				<title>Service Discovery with Docker: Docker links and beyond</title>
				<description>&lt;p&gt;To get a feel for wiring up an environment with Docker containers, I looked into a couple of options for service discovery - &lt;a href=&quot;http://docs.docker.io/en/latest/use/working_with_links_names/&quot; target=&quot;_blank&quot;&gt;Docker Names and Links&lt;/a&gt;, and &lt;a href=&quot;https://github.com/coreos/etcd&quot; target=&quot;_blank&quot;&gt;Etcd&lt;/a&gt; - and put together a couple of prototypes. In this article, I will talk a little about what service discovery is, how Docker containers fit in, and how (a couple) different techniques for wiring together your containers stack up.
&lt;h2&gt;What is service discovery?&lt;/h2&gt;
Service Discovery is an umbrella term for the many aspects of managing the knowledge of where your application&amp;#39;s services can be found and how they should communicate. Some of these aspects are:
&lt;ul&gt;
    &lt;li&gt;Providing a way for your application&amp;#39;s services to locate and communicate with each other.&lt;/li&gt;
    &lt;li&gt;Providing a way for your application&amp;#39;s services to come and go (e.g. when new versions are deployed), without disrupting the system as a whole.&lt;/li&gt;
    &lt;li&gt;Providing a way for your application&amp;#39;s services to know which other services are actually (not just expected to be) available.&lt;/li&gt;
    &lt;li&gt;When there is more than one instance of a particular service, providing a way for clients of that service to decide which to use.&lt;/li&gt;
    &lt;li&gt;Providing a way for an end user to locate and communicate with your application.&lt;/li&gt;
    &lt;li&gt;Providing a way to keep the details of how your environment is wired and distributed decoupled from your application.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Vis-à-vis Docker&lt;/h2&gt;

&lt;p&gt;A few characteristics of Docker containers make some aspects of service discovery especially important.
&lt;ul&gt;
    &lt;li&gt;Docker containers are designed to be portable across environments. For this reason, decoupling the knowledge of your services&amp;#39; communication details from your application (and putting it in the care of the environment itself) is especially necessary with Docker.&lt;/li&gt;
    &lt;li&gt;A container doesn&amp;#39;t really know anything about its host machine, so it doesn&amp;#39;t know what IP or port through which it is exposed to the outside world. If you are content with one host, this doesn&amp;#39;t matter because the containers can all see each other just fine. If, however you want more than one physical machine to facilitate a highly available application, you must manage the location of your service outside of the container which contains it.&lt;/li&gt;
    &lt;li&gt;Containers are ephemeral. This means that when you need to release an update to your software, you are going to release a new container (with a new IP and port) and not just update your software in place.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Trying things out&lt;/h2&gt;
To put &lt;a href=&quot;http://docs.docker.io/en/latest/use/working_with_links_names/&quot; target=&quot;_blank&quot;&gt;Docker links&lt;/a&gt; and &lt;a href=&quot;https://github.com/coreos/etcd&quot; target=&quot;_blank&quot;&gt;Etcd&lt;/a&gt; to the test, I created a simple set of services that need to be located for communication in three different ways:
&lt;ol&gt;
    &lt;li&gt;An end user with a browser needs to navigate to a Java app running inside a container.&lt;/li&gt;
    &lt;li&gt;The Java app running inside a container needs to talk to another Java app running in a different container.&lt;/li&gt;
    &lt;li&gt;The second Java app needs to talk to a Memcached service running in its own container.&lt;/li&gt;
&lt;/ol&gt;
&lt;a href=&quot;/images/svc-discovery-poc2.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-264&quot; alt=&quot;svc-discovery-poc2&quot; src=&quot;/images/svc-discovery-poc2.png&quot; width=&quot;736&quot; height=&quot;137&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To keep the implementation of these scenarios simple, I&amp;#39;ve written a single Java app with two resources to simulate two services. By running the app in two separate containers, we can treat them as separate applications. For each, I expose my application to the end user using &lt;a href=&quot;https://github.com/dotcloud/hipache&quot; target=&quot;_blank&quot;&gt;Hipache&lt;/a&gt;.
&lt;h3&gt;Docker Names and Links&lt;/h3&gt;
Jump over to the &lt;a href=&quot;http://docs.docker.io/en/latest/use/working_with_links_names/&quot; target=&quot;_blank&quot;&gt;Docker Docs&lt;/a&gt; if you&amp;#39;d like to hear more about names and links, or jump in and try out my prototype.&lt;/p&gt;

&lt;p&gt;Get the &lt;a href=&quot;https://github.com/benschw/docker-service-discovery-with-links&quot; target=&quot;_blank&quot;&gt;poc on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git clone https://github.com/benschw/docker-service-discovery-with-links.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To run the test, add a name to your &lt;code&gt;/etc/hosts&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;127.0.0.1 client.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Build the project&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;docker-service-discovery-with-links
./gradlew shadow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Build the container image&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo docker build -t app .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Deploy the test environment&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo ./run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can exercise the test environment from end to end by navigating your browser to &amp;quot;http://client.local/demo.&amp;quot; (Click refresh a few times to see the list of random numbers grow.)&lt;/p&gt;

&lt;p&gt;Below is an outline of the flow of control, but it might be easier to just take a peak at &lt;a href=&quot;https://github.com/benschw/docker-service-discovery-with-links/blob/master/src/main/java/com/benschw/example/resources/ExampleResource.java&quot; target=&quot;_blank&quot;&gt;the resources being used&lt;/a&gt; (fyi, the Java service is implemented using &lt;a href=&quot;http://dropwizard.codahale.com/&quot; target=&quot;_blank&quot;&gt;DropWizard&lt;/a&gt;.)
&lt;ul&gt;
    &lt;li&gt;The host client.local is routed to port 80 on your local machine.&lt;/li&gt;
    &lt;li&gt;Our Hipache container is listening to port 80, so it gets your traffic.&lt;/li&gt;
    &lt;li&gt;Hipache proxies the request to the instance of our Java app serving the &amp;quot;client role&amp;quot; and ends up getting handled by the &amp;quot;/demo&amp;quot; resource.&lt;/li&gt;
    &lt;li&gt;The &amp;quot;/demo&amp;quot; resource finds the instance of our Java app serving the &amp;quot;service role&amp;quot; in its environment variables (where we put them by linking the containers.)&lt;/li&gt;
    &lt;li&gt;It uses this address to &lt;code&gt;POST&lt;/code&gt; a random number to the &amp;quot;/entry&amp;quot; resource found in the &amp;quot;service role&amp;quot; container.&lt;/li&gt;
    &lt;li&gt;The &amp;quot;/entry&amp;quot; resource in the &amp;quot;service role&amp;quot; container handles the request, and uses its own link to the memcached container to locate that service.&lt;/li&gt;
    &lt;li&gt;After appending the random number to a list stored in the memcached container, the full list of random numbers is returned first to the client container, and finally to the browser.&lt;/li&gt;
&lt;/ul&gt;
If you take a look at &lt;a href=&quot;https://github.com/benschw/docker-service-discovery-with-links/blob/master/run.sh&quot; target=&quot;_blank&quot;&gt;run.sh&lt;/a&gt;, you can see the mechanics of how the containers are all run, linked together, and how the client container is added to Hipache.
&lt;h3&gt;Using Etcd to Discover Docker Containers&lt;/h3&gt;
Using links for discovery leaves a couple things to be desired. First of all, links only work on one host and only expose private IPs and ports, so if you want to make your application HA, you&amp;#39;ll need something else. Second, the address info is only good for as long as your linked container is around, so if you want to release an update, you have to restart all containers that rely on the update - not just the container being updated.&lt;/p&gt;

&lt;p&gt;My Etcd prototype works much the same as my links prototype. Before you judge me too harshly (or worse, start thinking about using any of this code in a real environment :) ), remember this is just a prototype- no part of it (including the components published to the Docker Index) is fit for developing against. &lt;/p&gt;

&lt;p&gt;Give it a go, and don&amp;#39;t forget to stop the previous setup if you haven&amp;#39;t already:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo docker ps &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs sudo docker stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure you still have the name (&lt;code&gt;127.0.0.1 client.local&lt;/code&gt;) in your &lt;code&gt;/etc/hosts&lt;/code&gt; file, and...&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git clone https://github.com/benschw/docker-service-discovery-with-etcd.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;docker-service-discovery-with-links
./gradlew shadow
sudo docker build -t app .
sudo ./run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and finally, the demo address (&amp;quot;http://client.local/demo&amp;quot;) is the same here.&lt;/p&gt;

&lt;p&gt;There are a few differences you&amp;#39;ll notice if you take a peak at &lt;a href=&quot;https://github.com/benschw/docker-service-discovery-with-etcd/blob/master/run.sh&quot; target=&quot;_blank&quot;&gt;run.sh&lt;/a&gt;. First of all you&amp;#39;ll notice a few new containers:
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;benschw/etcd&lt;/strong&gt; is the Etcd service: a key value store to which we will publish all of our containers&amp;#39; addresses.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;benschw/etcdedge&lt;/strong&gt; runs a python script which keeps Hipache&amp;#39;s config synchronized with etcd (so we can write once to etcd and expect our proxy to also get configured.)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;benschw/etcdbridge&lt;/strong&gt; publishes my application addresses to etcd. One instance is run for each application container, and it is in charge of keeping its container&amp;#39;s address registered in etcd until it fails a health check or disappears.&lt;/li&gt;
&lt;/ul&gt;
(A complete explanation of &lt;a href=&quot;https://github.com/benschw/etcdedge&quot; target=&quot;_blank&quot;&gt;etcdedge&lt;/a&gt; and &lt;a href=&quot;https://github.com/benschw/etcdbridge&quot; target=&quot;_blank&quot;&gt;etcdbridge&lt;/a&gt; is out of scope for this article, but take a look at the source if you&amp;#39;re interested.)&lt;/p&gt;

&lt;p&gt;A second difference is that there are two instances of both the &amp;quot;client&amp;quot; and &amp;quot;service&amp;quot; containers. Despite the fact that this is a single host example, this is an attempt to show how having multiple copies on different hardware could interact in this example environment.&lt;/p&gt;

&lt;p&gt;A final difference is that since the Etcd store is decoupled from the running of the application containers, we can stop and start individual components of the system without the cascading restart requirement necessitated by using Docker links for discovery.
&lt;h2&gt;Sorry this took so long&lt;/h2&gt;
Despite a desire to go into this deeper and relay more of my thoughts on service discovery with Docker, I find it hard to imagine that anybody is left reading so I&amp;#39;m just going to wrap it up.&lt;/p&gt;

&lt;p&gt;The best TLDR I can supply is the prototype source itself (remember, all the orchestration is in &amp;quot;run.sh&amp;quot;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benschw/docker-service-discovery-with-links&quot; target=&quot;_blank&quot;&gt;Discovery with Docker Links poc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benschw/docker-service-discovery-with-etcd&quot; target=&quot;_blank&quot;&gt;Discovery with Etcd poc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the additional components used in the Etcd prototype:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benschw/etcdbridge&quot; target=&quot;_blank&quot;&gt;etcdbridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benschw/etcdedge&quot; target=&quot;_blank&quot;&gt;etcdedge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Mon, 02 Dec 2013 22:59:16 +0000</pubDate>
				<link>txt.fliglio.com//2013/12/service-discovery-with-docker-docker-links-and-beyond/</link>
				<guid isPermaLink="true">txt.fliglio.com//2013/12/service-discovery-with-docker-docker-links-and-beyond/</guid>
			</item>
		
			<item>
				<title>Creating a MySQL Docker Container</title>
				<description>&lt;p&gt;On the surface, creating a MySQL container for Docker is pretty easy, but if you want to connect in (not sure what a mysql server that didn&amp;#39;t allow that would be good for) and decouple your databases from your container (I&amp;#39;m assuming you don&amp;#39;t want those to go away with your container) then there are a few problems to sort out.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to start with that simplistic example (with ephemeral database storage and no way to connect) and build on the example until we have something useful. Still not production ready, but good enough for hacking ;)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Oh, and you can jump to the &lt;a href=&quot;https://gist.github.com/benschw/7391723&quot; target=&quot;_blank&quot;&gt;gist&lt;/a&gt; (which has the files for building the container as well as some scripts to build and run it) if things get too boring or convoluted.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;create the &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;FROM ubuntu

RUN dpkg-divert --local --rename --add /sbin/initctl
RUN ln -s /bin/true /sbin/initctl

RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;deb http://archive.ubuntu.com/ubuntu precise main universe&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list
RUN apt-get update
RUN apt-get upgrade -y

RUN apt-get -y install mysql-server

EXPOSE 3306

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/bin/mysqld_safe&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then build and tag it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;docker build -t mysql .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a fully functioning container that we can run like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;docker run -d -p 3306:3306 mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This would work, but it wouldn&amp;#39;t be very useful.
&lt;ul&gt;
  &lt;li&gt;mysql is listening on 127.0.0.1 so we can only connect from inside the container&lt;/li&gt;
  &lt;li&gt;we only have a root user, and the root user is only allowed to log in from inside the container&lt;/li&gt;
  &lt;li&gt;since our data is getting written inside the container, if we lose the container or need to change something about it (like apply a security update), we lose our data.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;h3&gt;Updating bind-address&lt;/h3&gt;

&lt;p&gt;First step is to make our mysql server listen to more than localhost so that we can connect from outside of our container.&lt;/p&gt;

&lt;p&gt;To do this, we need to update the bind-address in &lt;code&gt;/etc/mysql/my.cnf&lt;/code&gt; from &lt;code&gt;127.0.0.1&lt;/code&gt; to &lt;code&gt;0.0.0.0&lt;/code&gt; (have mysqld bind to every available network instead of just localhost.)&lt;/p&gt;

&lt;p&gt;We could just start maintaining the &lt;code&gt;/etc/mysql/my.cnf&lt;/code&gt; file and add it to our container with our Dockerfile: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ADD ./my.cnf /etc/mysql/my.cnf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or we could update that one property. I prefer this way so that I know that I am getting the most up to date config from my install, and just updating what I need to. We can add the appropriate &lt;code&gt;sed&lt;/code&gt; command to our Dockerfile after we&amp;#39;ve installed mysql-server.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;RUN sed -i -e&lt;span class=&quot;s2&quot;&gt;&amp;quot;s/^bind-address\s*=\s*127.0.0.1/bind-address = 0.0.0.0/&amp;quot;&lt;/span&gt; /etc/mysql/my.cnf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Technically we could just delete the line for the same effect, but this is more explicit.)&lt;/p&gt;

&lt;p&gt;Even though mysqld is listening everywhere now, we still can&amp;#39;t log in because the root user only has access from localhost.&lt;/p&gt;

&lt;h3&gt;Admin user&lt;/h3&gt;

&lt;p&gt;We need to add an admin account to administer things from outside of the container. In order to add an account, we need our mysql server to be running. Since separate lines in a Dockerfile create different commits, and commits only retain filesystem state (not memory state), we need to cram both commands into one commit:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;RUN /usr/sbin/mysqld &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    sleep 10s &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GRANT ALL ON *.* TO admin@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;changeme&amp;#39; WITH GRANT OPTION; FLUSH PRIVILEGES&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; mysql
    
EXPOSE 3306
    
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/bin/mysqld_safe&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s build and run it!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;docker build -t mysql .
docker run -d -p 3306:3306 mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now to try connecting. In order to do this, we need to figure out the container&amp;#39;s ip, and to find that, we need our container&amp;#39;s id. This is easy enough to do by hand with &lt;code&gt;docker ps&lt;/code&gt; and &lt;code&gt;docker inspect&lt;/code&gt;, but you could also script it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CONTAINER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker ps &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep mysql &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker inspect &lt;span class=&quot;nv&quot;&gt;$CONTAINER_ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; python -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;import json,sys;obj=json.load(sys.stdin);print obj[0][&amp;quot;NetworkSettings&amp;quot;][&amp;quot;IPAddress&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
mysql -u admin -p -h &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a fully functional mysql container! That&amp;#39;s great and all, but we&amp;#39;re putting a lot of trust into this container by relying on it to keep track of our databases, not to mention we&amp;#39;re screwed if we ever want to upgrade or update anything.&lt;/p&gt;

&lt;h3&gt;Persisting data&lt;/h3&gt;

&lt;p&gt;We need to remove our reliance on this specific container and to do this we need to externalize our data directory. This is easy, but causes problems. When running our container, we just throw in a &lt;code&gt;-v /host/path:/container/path&lt;/code&gt; and the supplied directory on our host machine is used in the container wherever we specify.&lt;/p&gt;

&lt;p&gt;So to persist databases from our container in &lt;code&gt;/data/mysql&lt;/code&gt; on our host machine, we update our run command to be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;docker run -d -p 3306:3306 -v /data/mysql:/var/lib/mysql mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem is, we just nuked our system tables when we replaced &lt;code&gt;/var/lib/mysql&lt;/code&gt; with our empty directory. This also means we lost our admin user. This is tricky to account for because we can&amp;#39;t initialize the directory (or add our admin user) until the data directory is visible to the container (at run time) but we don&amp;#39;t want to initialize the directory every time we start up either. The whole point of externalizing the data directory is so that the container can come and go without loss of data.&lt;/p&gt;

&lt;p&gt;To solve this, let&amp;#39;s create a &lt;code&gt;startup.sh&lt;/code&gt; script to replace simply invoking &lt;code&gt;/usr/bin/mysqld_safe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, let&amp;#39;s write our &lt;code&gt;startup.sh&lt;/code&gt; script to do the initialization only if our data directory isn&amp;#39;t already populated.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f /var/lib/mysql/ibdata1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;mysql_install_db
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

/usr/bin/mysqld_safe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will look for the file &amp;quot;ibdata1&amp;quot; in our data dir as a cheap way to determine if we need to initialize the directory or not. After the data directory has been initialized (or determined already initialized) we can continue on to start up the server.&lt;/p&gt;

&lt;p&gt;And now we will update the Dockerfile to add &lt;code&gt;startup.sh&lt;/code&gt; to the container and to call it instead of &lt;code&gt;mysqld_safe&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ADD ./startup.sh /opt/startup.sh
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;/opt/startup.sh&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can also add in our admin user with the &lt;code&gt;startup.sh&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f /var/lib/mysql/ibdata1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;mysql_install_db

    /usr/bin/mysqld_safe &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
    sleep 10s

    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GRANT ALL ON *.* TO admin@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;changeme&amp;#39; WITH GRANT OPTION; FLUSH PRIVILEGES&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; mysql

    killall mysqld
    sleep 10s
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

/usr/bin/mysqld_safe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And of course we should also remove the &lt;code&gt;RUN&lt;/code&gt; line from the Dockerfile that was doing the same thing but getting undone as soon as we externalized the data directory.&lt;/p&gt;

&lt;h2&gt;Put it all together&lt;/h2&gt;

&lt;p&gt;Don&amp;#39;t want to follow all the incremental directions to get your files right? Here&amp;#39;s the finished product (plus some helper scripts to build, run your server, and connect with the cli client.)&lt;/p&gt;

&lt;p&gt;These files are also available as a &lt;a href=&quot;https://gist.github.com/benschw/7391723&quot; target=&quot;_blank&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt; Dockerfile&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;FROM ubuntu

RUN dpkg-divert --local --rename --add /sbin/initctl
RUN ln -s /bin/true /sbin/initctl

RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;deb http://archive.ubuntu.com/ubuntu precise main universe&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list
RUN apt-get update
RUN apt-get upgrade -y

RUN apt-get -y install mysql-client mysql-server

RUN sed -i -e&lt;span class=&quot;s2&quot;&gt;&amp;quot;s/^bind-address\s*=\s*127.0.0.1/bind-address = 0.0.0.0/&amp;quot;&lt;/span&gt; /etc/mysql/my.cnf

ADD ./startup.sh /opt/startup.sh

EXPOSE 3306

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;/opt/startup.sh&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;startup.sh&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f /var/lib/mysql/ibdata1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;mysql_install_db

    /usr/bin/mysqld_safe &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
    sleep 10s

    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GRANT ALL ON *.* TO admin@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;changeme&amp;#39; WITH GRANT OPTION; FLUSH PRIVILEGES&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; mysql

    killall mysqld
    sleep 10s
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

/usr/bin/mysqld_safe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;and some helpful scripts to do all our tasks&lt;/h3&gt;

&lt;h4&gt;build.sh&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

docker build -t mysql .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;run-server.sh&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

docker run -d -p 3306:3306 -v /data/mysql:/var/lib/mysql mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;run-client.sh&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mysql&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CONTAINER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker ps &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;nv&quot;&gt;$TAG&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker inspect &lt;span class=&quot;nv&quot;&gt;$CONTAINER_ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; python -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;import json,sys;obj=json.load(sys.stdin);print obj[0][&amp;quot;NetworkSettings&amp;quot;][&amp;quot;IPAddress&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

mysql -u admin -p -h &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
				<pubDate>Sun, 10 Nov 2013 06:31:25 +0000</pubDate>
				<link>txt.fliglio.com//2013/11/creating-a-mysql-docker-container/</link>
				<guid isPermaLink="true">txt.fliglio.com//2013/11/creating-a-mysql-docker-container/</guid>
			</item>
		
			<item>
				<title>OAuth 2 Grant Types Demystified</title>
				<description>&lt;p&gt;It seems like a couple times a year I need to work with Auth and realize that i&amp;#39;ve forgotten how grant types work. What is each grant type for? What does the workflow to use each look like? Which is the one I should be using for this problem?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;After googling around and reading some &amp;quot;getting started with OAuth&amp;quot; blogs, I eventually end up wading through the specification &lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-oauth-v2-31&quot; target=&quot;_blank&quot;&gt;tools.ietf.org&lt;/a&gt;. Not the worst use of time, but not the best use either.&lt;/p&gt;

&lt;p&gt;This time I decided to document my research in a way that will hopefully serve as a cheat-sheet reference next time this comes up.&lt;/p&gt;

&lt;p&gt;Maybe someone else will find it useful too:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benschw.github.io/oauth2-grants&quot; target=&quot;_blank&quot;&gt;http://benschw.github.io/oauth2-grants&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 28 Sep 2013 02:30:42 +0000</pubDate>
				<link>txt.fliglio.com//2013/09/oauth-2-grant-types-demystified/</link>
				<guid isPermaLink="true">txt.fliglio.com//2013/09/oauth-2-grant-types-demystified/</guid>
			</item>
		
			<item>
				<title>Protyping web stuff with Docker</title>
				<description>&lt;p&gt;This is &amp;quot;post 1&amp;quot; in a series of tutorials designed to stand up an Amazon ec2 instance which will provide the automated hosting of applications using docker. This first post starts with some base line provisioning and ends with a manual walk through of what we will automate in later posts.&lt;/p&gt;

&lt;p&gt;If asked to characterize Docker (I know, no one has), I&amp;#39;d say that it&amp;#39;s a pattern/software that revolutionizes application and service deployment by reducing artifacts to a lowest common denominator, while at the same time making orchestration and discovery a pain in the ass. In this post (and others in the series if I get around to it) I&amp;#39;m going to attempt to play to docker&amp;#39;s strengths while automating the &amp;quot;pain in the ass&amp;quot; parts, to create a platform which will make hosting prototypes dirt simple. Why prototypes and not production applications? Because (right now at least) I don&amp;#39;t plan on addressing data persistence, scalability (beyond a single EC2 instance), or different environments like dev and uat. Don&amp;#39;t get me wrong, docker (and Hipache, which I&amp;#39;ll introduce later) is actually quite good at handling these concerns, but again... I don&amp;#39;t plan on addressing them.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Build a free Amazon EC2 instance for this tutorial&lt;/h2&gt;

&lt;p&gt;I find it painful to describe how to use a gui (and acknowledge this to be irrational), and I&amp;#39;m sure you can figure out how to use Amazon, but in the interest of completeness and not assuming anything, I&amp;#39;m going to burn through this real quick.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Launch a new EC2 instance&lt;/li&gt;
&lt;li&gt;Choose the classic wizard&lt;/li&gt;
&lt;li&gt;Select &quot;ubuntu server 12.04 LTS 64bit, t1 micro&quot;&lt;/li&gt;
&lt;li&gt;Choose an existing key or create one&lt;/li&gt;
&lt;li&gt;Set up security groups (we want ports 22 and 80 for this tutorial, but since its apparently impossible to change this later, go ahead and open up 5000, 8080, and 8081 too -- for subsequent installments to this series of posts)&lt;/li&gt;
&lt;li&gt;launch&lt;/li&gt;
&lt;li&gt;We also want to generate an elastic IP and associate it with our new instance so we can set up DNS; so do that&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now shell into your vm with something like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ssh -i ~/.ssh/aws-key-benschw.pem ubuntu@54.244.120.37
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I like to create myself an account separate from the ubuntu one too (so I don&amp;#39;t have to look up ssh&amp;#39;s &lt;code&gt;-i&lt;/code&gt; flag mostly). Just make sure to install your own ssh-key and add yourself to the sudoers group.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo su
adduser ben
usermod -G sudo ben
su ben
&lt;span class=&quot;c&quot;&gt;# paste your key into ~/.ssh/authorized_keys&lt;/span&gt;
chmod 600 ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Install docker&lt;/h2&gt;

&lt;p&gt;I can&amp;#39;t improve upon Docker&amp;#39;s own install docs, so I won&amp;#39;t try. Follow their instructions (I copy pasted every line and hit &amp;quot;y&amp;quot; or &amp;quot;enter&amp;quot; a couple of times) from inside your EC2 instance.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.docker.io/en/latest/installation/ubuntulinux/&quot; title=&quot;Docker install for Ubuntu&quot; target=&quot;_blank&quot;&gt;Docker install for Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;test stuff out&lt;/h2&gt;

&lt;p&gt;Now lets install a copy of wordpress on port 80 just to confirm everything is right so far. Normally, we&amp;#39;d just let docker assign us a port, but for now lets ask for 80 since we&amp;#39;ve only punched a limited number of holes in our EC2 instance&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo docker pull jbfink/wordpress
sudo docker run -d -p 80:80 jbfink/wordpress:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Navigate to your elastic IP and confirm the install screen comes up. Since it did, we&amp;#39;re all good to go and now it&amp;#39;s time to tear it down and reclaim our precious port 80.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo docker stop f26d90158382
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you forgot your id, &lt;code&gt;sudo docker ps -a&lt;/code&gt; should give you what you&amp;#39;re looking for.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://index.docker.io&quot; target=&quot;_blank&quot;&gt;https://index.docker.io&lt;/a&gt; lists public containers if wordpress doesn&amp;#39;t get your motor going...)&lt;/p&gt;

&lt;h2&gt;Hipache&lt;/h2&gt;

&lt;p&gt;Now it&amp;#39;s time to address our port problem. Lets face it, keeping track of them is a big part of the &amp;quot;pain in the ass&amp;quot; thing, and they don&amp;#39;t make for a very friendly user experience. If I was my dad (and if my dad was a sysadmin) I&amp;#39;d host everything on port 80 and assign ips to each docker container, but I&amp;#39;m not so I won&amp;#39;t.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://github.com/dotcloud/docker/wiki/Public-docker-images#hipache&quot; target=&quot;_blank&quot;&gt;Hipache&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hipache is a distributed proxy designed to route high volumes of http and websocket traffic to unusually large numbers of... take a look at the &lt;a href=&quot;https://github.com/dotcloud/hipache&quot; target=&quot;_blank&quot;&gt;readme&lt;/a&gt; if you want a definition, but suffice it to say, it&amp;#39;s distributed, scalable, and solves our port problem.&lt;/p&gt;

&lt;p&gt;Since we&amp;#39;re building a prototyping box, persistence isn&amp;#39;t too important. In fact, to keep things simple, let me just warn you now, that restarting your host machine is going to nuke (most of) everything we&amp;#39;re about to do. &lt;/p&gt;

&lt;p&gt;That said, lets pull down a Hipache container from the Docker index and get &amp;#39;er running:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo docker pull samalba/hipache

sudo docker run -d -p 6379:6379 -p 80:80 samalba/hipache supervisord -n
&lt;span class=&quot;c&quot;&gt;# this spits out our Hipache container ID, in my case it&amp;#39;s `e40c90158472`&lt;/span&gt;

sudo docker inspect e40c90158472 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep Bridge &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -d&lt;span class=&quot;s2&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; -f2 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -d&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; -f2
&lt;span class=&quot;c&quot;&gt;# probably better ways to parse JSON, but this will serve to get us our &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# bridge interface; in my case it&amp;#39;s `docker0`&lt;/span&gt;

/sbin/ifconfig  docker0 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;2 p&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -d&lt;span class=&quot;s2&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; -f2
&lt;span class=&quot;c&quot;&gt;# more black magic to get our bridge&amp;#39;s ip (which doubles as our redis &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# host): for me it&amp;#39;s 172.17.42.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recap: Hipache is running and we know some stuff about it. Since we specified port 80 &amp;amp; 6379, we also know Hipache is running on port 80 and redis is running on port 6379. (By the way, redis is a database and provides configuration for Hipache.)&lt;/p&gt;

&lt;p&gt;Now we need somehow to find our containers since we want Hipache to get rid of ports; DNS should do the trick. In the interest of progressing towards our prototyping platform, I&amp;#39;m going to set up a wildcard record that points to our host IP. For me, I used &lt;code&gt;*.io A 54.212.254.136&lt;/code&gt; in my fliglio.com dns. (This way *.io.fliglio.com will point to my EC2 host machine.)&lt;/p&gt;

&lt;p&gt;The last piece of prep work is to get a redis client installed on the host machine so we can configure Hipache.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo apt-get install redis-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The downside of this, is we just installed the client and the server, and Ubuntu has started up a redis server on our host machine... go ahead and kill it: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo /etc/init.d/redis-server stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thats all there is to it, we&amp;#39;re ready to roll! ...or maybe you&amp;#39;re thinking that was a lot of work and you&amp;#39;re ready to go back to ips...&lt;/p&gt;

&lt;h2&gt;Lets host something&lt;/h2&gt;

&lt;p&gt;Back to the ol&amp;#39; wordpress standby. This time we aren&amp;#39;t going to specify a port, but are instead going to let Docker assign it an obnoxious random one.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo docker run -d -p 80 jbfink/wordpress:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;sudo docker ps -a&lt;/code&gt; will tell us the port mapping, or we can use the container id to find what got mapped to port 80.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo docker port d6077ac8b6e8 80
&lt;span class=&quot;c&quot;&gt;# 49154&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last step is to configure Hipache to route traffic sent to the domain we decided on (I&amp;#39;m using wp.io.fliglio.com) to the bridge ip our wordpress container is running on (the same as the one we figured out earlier for Hipache in this single host scenario) with the port docker is exposing the wordpress container&amp;#39;s port 80 through (49154)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;redis-cli -h 172.17.42.1 -p 6379 rpush frontend:wp.io.fliglio.com wpdemo
redis-cli -h 172.17.42.1 -p 6379 rpush frontend:wp.io.fliglio.com http://172.17.42.1:49154
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thats it! &lt;code&gt;wp.io.fliglio.com&lt;/code&gt; should take you to a fresh wordpress installer that will generate even less traffic than this blog!&lt;/p&gt;

&lt;p&gt;In Part 2, we&amp;#39;ll dive into automating some of this and leveraging it as a sandbox for prototyping. Granted most blogs end up being ephemeral anyway (without the help of Docker or this tutorial), but maybe we can squeeze a little more than wordpress installer hosting out of this setup just the same.&lt;/p&gt;

&lt;h2&gt;Extra Credit&lt;/h2&gt;

&lt;p&gt;Spin up a second wordpress container, add a corresponding config entry to Hipache, and see how easy it is to get load balanced applications with Docker:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;sudo docker run -d -p 80 jbfink/wordpress:latest&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;sudo docker port &lt;span class=&quot;nv&quot;&gt;$ID&lt;/span&gt; 80&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
redis-cli -h 172.17.42.1 -p 6379 rpush frontend:wp.io.fliglio.com http://172.17.42.1:&lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;since i&amp;#39;m not providing a good way to test that that worked, just look at your config and trust me:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;redis-cli -h 172.17.42.1 -p 6379 lrange frontend:wp.io.fliglio.com 0 -1
1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;wpdemo&amp;quot;&lt;/span&gt;
2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://172.17.42.1:49154&amp;quot;&lt;/span&gt;
3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://172.17.42.1:49156&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
				<pubDate>Wed, 18 Sep 2013 06:23:09 +0000</pubDate>
				<link>txt.fliglio.com//2013/09/protyping-web-stuff-with-docker/</link>
				<guid isPermaLink="true">txt.fliglio.com//2013/09/protyping-web-stuff-with-docker/</guid>
			</item>
		
			<item>
				<title>AngularJS State Management with ui-router</title>
				<description>&lt;p&gt;Managing state with AngularJS&amp;#39;s ui-router (&lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;https://github.com/angular-ui/ui-router&lt;/a&gt;) is down right elegant. How is it different from a traditional router you might ask? Well I&amp;#39;ll tell you, but first...&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;A little history about routers&lt;/h2&gt;

&lt;p&gt;Routers provide an abstraction between a url and a request that an application knows how to satisfy. With traditional web service applications, this is straight forward:
&lt;ul&gt;
    &lt;li&gt;A url is routed to a request.&lt;/li&gt;
    &lt;li&gt;A request is used to look up some driver code that knows how to build a response.&lt;/li&gt;
&lt;/ul&gt;
When a service is rendering a page or retrieving data, this separation of responsibilities makes sense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what happens when the concept of a &amp;quot;page&amp;quot; becomes more ambiguous?&lt;/strong&gt; What happens when only parts of a page need to be updated, or the end user is given the option to perform their own curation of a page? &lt;strong&gt;What happens when modularity is needed in a request?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If page composition is fluid, but we still need urls to discretely (for the most part) represent the various permutations of content, how do we effectively route requests? No matter how much we decouple our page components, we&amp;#39;re still left with convoluted logic evaluating how to organize them into a specific page.&lt;/p&gt;

&lt;p&gt;Sure something like a router is necessary to translate between a url and a request, but how can you include modularity in a request when you are declaratively mapping it to a url?
&lt;h2&gt;AngularJS State Manager&lt;/h2&gt;
You Don&amp;#39;t!&lt;/p&gt;

&lt;p&gt;The most interesting thing about AngularJS&amp;#39;s new router, isn&amp;#39;t the router itself, but the state manager that comes with it. Instead of targeting a controller/view to render for a given url, you target a state. States are managed in a heirarchy providing inheritance of parent states and complex composition of page components, all the while remaining declarative in nature.&lt;/p&gt;

&lt;p&gt;Without further ado, start fiddling: &lt;a title=&quot;angular state demo&quot; href=&quot;http://jsfiddle.net/benschwartz/LhydD/&quot;&gt;http://jsfiddle.net/benschwartz/LhydD/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or digging into angular&amp;#39;s own docs: &lt;a title=&quot;ui-router wiki&quot; href=&quot;https://github.com/angular-ui/ui-router/wiki&quot;&gt;https://github.com/angular-ui/ui-router/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;... or stick around for an explanation.
&lt;h2&gt; What can State do for me?&lt;/h2&gt;
Lets start with a simple example:&lt;/p&gt;

&lt;p&gt;index.html&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myApp&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-view&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;app.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;app.js &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myApp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ui.state&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$stateProvider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;         &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello {{name}}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$scope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;                 &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;         &lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not much is going on here, but basically this is how you&amp;#39;d implement a conventional route with the state manager. &lt;/p&gt;

&lt;p&gt;Lets build a simplified version of the settings section from the  &lt;a href=&quot;http://jsfiddle.net/benschwartz/LhydD/&quot;&gt;JSFiddle example&lt;/a&gt;.
&lt;/a&gt;
&lt;h2&gt;Settings&lt;/h2&gt;
&lt;a href=&quot;/images/settings-comp2.png&quot;&gt;&lt;img src=&quot;/images/settings-comp2.png&quot; alt=&quot;settings-comp2&quot; width=&quot;523&quot; height=&quot;266&quot; class=&quot;alignnone size-full wp-image-107&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So how do we build it?
Lets start by decomposing our pages (edit details and edit quotes) into states. To represent these two pages, we need three states: an abstract base state (settings) and two concrete child states (details and quotes.)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/settings&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.details&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quotes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.quotes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/quotes&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Though incomplete, this is the gist of how you define states with ui-router. Right off the bat, you can see that urls are built through state inheritance: to edit quotes, we&amp;#39;ll navigate to &amp;quot;settings/quotes&amp;quot; since the quotes state declares settings as its parent and thus inherits its url among other things.&lt;/p&gt;

&lt;p&gt;Next lets fill in the gaps and wire this up into an Angular module.&lt;/p&gt;

&lt;h3&gt;accountSettings Module&lt;/h3&gt;

&lt;p&gt;app.js&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;accountSettings&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ui.state&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$stateProvider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;         &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/settings&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;             &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;SettingsController&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.details&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.details.html&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;         &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quotes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.quotes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/quotes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.quotes.html&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;         &lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SettingsController&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$scope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;         &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Bob Loblaw&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bobloblaw@lawblog.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;semi-secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;quotes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Lorem ipsum dolor sic amet&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;index.html&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;accountSettings&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-view&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;app.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;settings.html&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span3&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pa-sidebar well well-small&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;       &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav nav-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-header&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Settings&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{ active: $state.includes(\&amp;#39;settings.user.default\&amp;#39;)}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#/settings&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;User Details&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{ active: $state.includes(\&amp;#39;settings.quotes\&amp;#39;)}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#/settings/quotes&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;User Quotes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;       &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span9&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-view&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;settings.details.html&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;{{user.name}}\&amp;#39;s Details&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;label&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;user.name&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;label&amp;gt;&lt;/span&gt;Email&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;user.email&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;done()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Save&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;settings.quotes.html&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;{{user.name}}\&amp;#39;s Quotes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;label&amp;gt;&lt;/span&gt;Quotes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;user.quotes&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;done()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Save&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;re Done!&lt;/p&gt;

&lt;h3&gt;Wait, what happened?&lt;/h3&gt;

&lt;p&gt;Ok ok, we can take a look at the code before we call it done.&lt;/p&gt;

&lt;p&gt;The first thing you might notice, is that settings has a url but details doesn&amp;#39;t. Since it doesn&amp;#39;t make sense to go to the settings state (if for no other reason then that it&amp;#39;s abstract) we have assigned the concrete state &amp;quot;details&amp;quot; to have a url of &amp;#39;&amp;#39; so that traffic to &amp;#39;/settings&amp;#39; will route to it. We could have done this the other way around, but as we add new pages to our accountSettings module (and children to our settings state) it makes sense for the parent state to declare the url namespace.&lt;/p&gt;

&lt;p&gt;The other interesting thing (and this is where we really start realizing the power of states) is that there is only one controller and it&amp;#39;s only wired up against the settings state! How are the &amp;#39;details&amp;#39; and &amp;#39;quotes&amp;#39; states getting populated with data only accessible by &amp;#39;settings&amp;#39; state you ask? Controller inheritance! Sorry if I&amp;#39;m getting excited here, but think about what we just did: without any convoluted registry/cache scheme, we were able to remove the one-to-one relationship that is typical between server requests and building a page. All of a sudden, we can start thinking about what data we need for a feature and how to present that data to the user as not intrinsically linked!&lt;/p&gt;

&lt;h3&gt;Scope Creep!&lt;/h3&gt;

&lt;p&gt;No, not $scope creep. Scope creep like what Marketing throws at you after you&amp;#39;re 90% done with their initial request.&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;re being asked to create a status bar in the settings section that will always display a description of what the user is supposed to be doing. (Don&amp;#39;t ask me why marketing would want this... but it does help to illustrate another feature of ui-router)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/settings-comp3.png&quot;&gt;&lt;img src=&quot;/images/settings-comp3.png&quot; alt=&quot;settings-comp3&quot; width=&quot;528&quot; height=&quot;387&quot; class=&quot;alignnone size-full wp-image-145&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Multiple (named) Views&lt;/h3&gt;

&lt;p&gt;We&amp;#39;ve already seen multiple views per page in the form of hierarchical states, each with their own view, but what about a single state that needs to display multiple views? Our new requirement, displaying a description of what the user is supposed to be doing, relies on just that.&lt;/p&gt;

&lt;p&gt;So maybe you&amp;#39;ve guessed by now that ui-router supports declaring multiple named views per state. If so, you&amp;#39;re right; and here&amp;#39;s an update to our hello world example illustrating how:&lt;/p&gt;

&lt;p&gt;index.html&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myApp&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-view&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     static nonsense
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-view=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;app.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;app.js &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myApp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ui.state&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$stateProvider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;         &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;                 &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;                     &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello {{name}}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;                     &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$scope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;                         &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;                     &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;                 &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;                     &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;         &lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you have it. One state updating two views. The default view (represented by &amp;#39;&amp;#39;) and the &amp;#39;foo&amp;#39; view.&lt;/p&gt;

&lt;h3&gt;accountSettings Module Updates&lt;/h3&gt;

&lt;p&gt;Since this is such an easy feature to add on, we&amp;#39;ll let marketing slide it in (even though we were already done.) All we need to do is add a named view to the settings.html partial and convert our &amp;#39;details&amp;#39; and &amp;#39;quotes&amp;#39; states to update both views.&lt;/p&gt;

&lt;p&gt;settings.html&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;alert&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-view=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hint&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span3&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pa-sidebar well well-small&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;       &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav nav-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-header&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Settings&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{ active: $state.includes(\&amp;#39;settings.user.default\&amp;#39;)}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#/settings&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;User Details&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{ active: $state.includes(\&amp;#39;settings.quotes\&amp;#39;)}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#/settings/quotes&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;User Quotes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;       &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span9&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-view&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;state definitions from app.js&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt;         &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.details&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;                 &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;                     &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.details.html&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;                 &lt;span class=&quot;s1&quot;&gt;&amp;#39;hint&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;                     &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;edit your details!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;         &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quotes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.quotes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/quotes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;                 &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;                     &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;settings.quotes.html&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;                 &lt;span class=&quot;s1&quot;&gt;&amp;#39;hint&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;                     &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;edit your quotes!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In a perfect world, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Design_Patterns&quot; title=&quot;Design Patterns&quot;&gt;GOF&lt;/a&gt; would come along and explain in simple terms the &amp;quot;right&amp;quot; way to route urls to requests in single page Javascript applications, and this way would soon become ubiquitous.&lt;/p&gt;

&lt;p&gt;In lieu of this, we&amp;#39;ll just have to keep trying things out and seeing what works. Maybe one day we&amp;#39;ll be back to that comfort zone which Routing provided for web service application architecture.&lt;/p&gt;

&lt;p&gt;Since I only scratched the surface, go check out &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot; title=&quot;ui-router&quot;&gt;ui-router on GitHub&lt;/a&gt;. There&amp;#39;s a more complete example there as well as some documentation on the wiki. &lt;/p&gt;
</description>
				<pubDate>Fri, 03 May 2013 18:45:54 +0000</pubDate>
				<link>txt.fliglio.com//2013/05/angularjs-state-management-with-ui-router/</link>
				<guid isPermaLink="true">txt.fliglio.com//2013/05/angularjs-state-management-with-ui-router/</guid>
			</item>
		
			<item>
				<title>Publishing a Yeoman app with GitHub Pages</title>
				<description>&lt;p&gt;There comes a time in every Github user&amp;#39;s life, when they begin to assume that other people might give a damn about the code they have written. While this assumption is by and large wrong, every so often someone produces something worth wrapping a marketing homepage around. Or they might want to dress up their GitHub page enough that their coworkers are willing to treat their reinvention of the wheel as a first class framework.&lt;/p&gt;

&lt;p&gt;For the rest of this doc I&amp;#39;ll be writing to the latter group (since that&amp;#39;s the category I fall into) but the steps should be the same in either case.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;We&amp;#39;re going to need to get a few things going before we get started:
&lt;ul&gt;
    &lt;li&gt;a &lt;a title=&quot;GitHub&quot; href=&quot;https://github.com/&quot;&gt;github account&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title=&quot;Yeoman&quot; href=&quot;http://yeoman.io/&quot;&gt;yeoman&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title=&quot;GruntJS&quot; href=&quot;http://gruntjs.com/&quot;&gt;grunt&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;a git client with the subtree (more on this later)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt; Setting up a github repo for  your site&lt;/h3&gt;
Follow along here, or get more details on setting up your user pages on github from their docs: &lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages&quot;&gt;https://help.github.com/articles/user-organization-and-project-pages&lt;/a&gt;
&lt;ul&gt;
    &lt;li&gt;Create a new repository using the convention:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;github.com/username/username.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;/li&gt;
&lt;/ul&gt;
so if your github username is bobloblaw, you&amp;#39;re be creating a new repo called &amp;quot;bobloblaw.github.io&amp;quot;
&lt;h3&gt;Creating a &amp;quot;src&amp;quot; branch to maintain your javascript app in&lt;/h3&gt;
If i leave something out, yeoman talks a little about this step here: &lt;a href=&quot;http://bit.ly/13GXzmz&quot;&gt;http://bit.ly/13GXzmz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, the trick here, is GitHub wants to host the root of your &amp;quot;master&amp;quot; branch as your doc root, and yeoman wants your docroot to be hosted out of the &amp;quot;dist/&amp;quot; folder. So what we&amp;#39;re going to do it set up a &amp;quot;src&amp;quot; branch to hold our yeoman development environment, and publish (git subtree push) the contents of dist/ to the root of our master branch.
&lt;ul&gt;
    &lt;li&gt;Clone your new repo &amp;amp; create a &amp;quot;src&amp;quot; branch so we can add in some Yeoman!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:bobloblaw/bobloblaw.github.io.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch src
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout src
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#github pages src branch&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;gt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; README.md
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -am &lt;span class=&quot;s2&quot;&gt;&amp;quot;adding a readme so i can add this branch to my repo on github&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push -u origin src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Yeoman&lt;/h3&gt;
At this point,  we need to get our Yeoman on so we have something to publish. Even though the possibilities are virtually endless and yeoman could be the topic of several tutorials, let&amp;#39;s just assume you&amp;#39;re into AngularJS:
&lt;ul&gt;
    &lt;li&gt;&lt;span style=&quot;line-height: 13px;&quot;&gt;from your checkout of the src branch, scaffold out your application with Yeoman&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install generator-angular generator-karma
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo angular
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;/li&gt;
&lt;/ul&gt;
Now you&amp;#39;ve got  a brand spankin new angular app thats just itching to be built and deployed to GitHub
&lt;ul&gt;
    &lt;li&gt;&lt;span style=&quot;line-height: 13px;&quot;&gt;build your project&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grunt build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;/li&gt;
    &lt;li&gt;tweak your .gitignore file to allow committing the dist folder we just built (remove &amp;quot;dist&amp;quot; from the file)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;/li&gt;
    &lt;li&gt;commit stuff and push!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -am &lt;span class=&quot;s2&quot;&gt;&amp;quot;bob loblaw&amp;#39;s github account is about to get snazzy&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Get it in the interwebs!&lt;/h3&gt;
Now that we&amp;#39;ve got our app built and you&amp;#39;ve sorted out how to acquire npm which i pretended you just had, you&amp;#39;d think we would be pretty close to seeing something on your github page. But first we have to install a shiny new tool for your git client. Or maybe you&amp;#39;re lucky and running &amp;quot;git subtree&amp;quot; doesn&amp;#39;t spit back:
&lt;pre&gt;&lt;code&gt;&amp;quot;git: &amp;#39;subtree&amp;#39; is not a git command. See &amp;#39;git --help&amp;#39;.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
If you&amp;#39;re running Ubuntu or HomeBrew on OS X,  this should help you: &lt;a href=&quot;http://bit.ly/ZYfJgB&quot;&gt;http://bit.ly/ZYfJgB&lt;/a&gt;
If you&amp;#39;re running port on OS x,  give this a try:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/git/git.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;git/contrib/subtree/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo cp git-subtree /opt/local/libexec/git-core/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;No Really, Get it in the interwebs!&lt;/h3&gt;

&lt;p&gt;Ok ok, now it really is just a command away:
&lt;ul&gt;
    &lt;li&gt;&lt;span style=&quot;line-height: 13px;&quot;&gt;&lt;span style=&quot;line-height: 13px;&quot;&gt;push your dist folder to the master branch
&lt;/span&gt;&lt;/span&gt;
&lt;pre&gt;&lt;code&gt;$ git subtree push --prefix dist origin master&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bask in the glory&lt;/h3&gt;
Did it work? http://bobloblaw.github.io should be hosting your angular app now... but there&amp;#39;s always a chance it isn&amp;#39;t.&lt;/p&gt;

&lt;p&gt;If it is, then that means that your open source gem is at last being properly represented. With a crisp looking page declaring &amp;quot;&amp;#39;Allo!&amp;quot; to anyone who will listen, it&amp;#39;s only a matter of time before the forks come rolling in and you start gaining notoriety as not just a hacker, but someone who can see the role marketing plays in programming.&lt;/p&gt;

&lt;p&gt;Added bonus: at the next dinner party you attend you can stop sheepishly replying &amp;quot;I&amp;#39;m just so busy!&amp;quot; when your fans implore you to start publishing your code.&lt;/p&gt;
</description>
				<pubDate>Tue, 30 Apr 2013 03:10:53 +0000</pubDate>
				<link>txt.fliglio.com//2013/04/publishing-a-yeoman-app-with-github-pages/</link>
				<guid isPermaLink="true">txt.fliglio.com//2013/04/publishing-a-yeoman-app-with-github-pages/</guid>
			</item>
		
	</channel>
</rss>