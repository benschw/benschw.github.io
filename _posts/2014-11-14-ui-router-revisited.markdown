---
layout: post
status: publish
published: true
title: AngularJS ui-router Revisited
author_login: benschwartz
author_email: benschw@gmail.com
categories:
- Post
tags: []
---

I got great reception from my [original post](http://txt.fliglio.com/2013/05/angularjs-state-management-with-ui-router/) about managing state with AngularJS's ui-router ([ui-router on github](https://github.com/angular-ui/ui-router),) but some feedback as well. Primarily, there was an ask for a full example (rather than the JSFiddle which seems to break a couple of times a week.) Since the library has matured and if I'm going to create a repo version of this then I'm going to start with [yeoman](http://yeoman.io/), I decided to write a new post with current versions and an application base generated by yeoman.

<!--more-->

If you just can't wait for the example repo, [here it is](https://github.com/benschw/ui-router-demo).

## State Management vs. Routers

What I wrote before is largely still applicable, so take a look at [my original take](http://txt.fliglio.com/2013/05/angularjs-state-management-with-ui-router/) for a full description.

The gist of the argument, is that _routes_ make sense for discrete endpoints, and _states_ make sense for application composition. If every page was essentially unique, then routes would be sufficient, but in a modern single page web app there are fewer concrete pages and more updates to the application's screen composition.

Managing your application with _states_ facilitates this way of thinking.

## A Demo is worth a thousand words

The example application I'm going to walk through is [hosted on github.io (this blog)](http://txt.fliglio.com/ui-router-demo/#/) and the source is likewise [available on github](https://github.com/benschw/ui-router-demo).

### Run it at home
You can get it up and running by cloning a copy and serving it up with grunt:

    git clone https://github.com/benschw/ui-router-demo.git
    cd ui-router-demo
    bower install
    npm install
    grunt serve

_If you don't have any of the dependencies (node, npm, bower, grunt) there are install instructions in the repo [README](https://github.com/benschw/ui-router-demo/blob/master/README.md)._

`grunt serve` will pop up a node webserver running on [localhost:9000](http://localhost:9000), so you can head there now to check out the application (actually, grunt probably opened a browser for you.) If you aren't following along at home, you can just take a look at [the hosted version](http://txt.fliglio.com/ui-router-demo/#/) and compare against the source code.

### What am I looking at?

Essentially this is a fake webapp with a home page and a settings section. The home page is pretty straight forward and would have made sense to be implemented with routes, but the settings section illustrates the composition problem I outlined above.

<a href="/images/uirouter.details.png"><img src="/images/uirouter.details.png" alt="setting details" width="750"/></a>

This isn't a "details page." It's a web app with a top nav and footer, containing a settings section with "details" selected as the primary focus.

With _ui-router_ I can model this composition as states and if I want to switch to "quotes," I only need to specify how to re-render that small portion of the page.

### How do I Do That?

The [root application](https://github.com/benschw/ui-router-demo/blob/master/app/scripts/app.js) is setting up the header, footer, and a container. It does this by registering a root "app" state which supplies a template for the header and footer, and leaves the main container empty.

The [home module](https://github.com/benschw/ui-router-demo/blob/master/app/scripts/home/home.js) is just a single state that fills the container with the contents of a container.

#### Settings Section
This is the meat of our demo, so I'll dig a little deeper.

The [settings module](https://github.com/benschw/ui-router-demo/blob/master/app/scripts/settings/settings.js) sets up an abstract settings state which adds the `/settings` namespace to the url, and defines a `SettingsController` which will set user data on the current `$scope`. This state also sets up the settings section nav and defines where the primary-focus content will go (its default view.)

`app.settings`
{% highlight javascript %}{% raw %}
'use strict';

angular
  .module('app.settings', [
    'ngResource',
    'ngRoute',
    'ui.router'
  ])
  .config(['$stateProvider', function($stateProvider) {

      var settings = {
          name: 'app.settings',
          abstract: true,
          url: '/settings',
          views: {
            '@': {
              templateUrl: 'scripts/settings/settings.html',
            }
          }
      };

      $stateProvider.state(settings);

  }])
  .controller('SettingsController', ['$scope', '$resource', function ($scope, $resource) {
    var User = $resource('stub-user.json');
    var user = User.get();
    $scope.user = user;
  }]);
{% endraw %}{% endhighlight %}

`settings.html`
{% highlight html %}{% raw %}
<div class="row">
  <div class="col-sm-3">
    <div class="pa-sidebar well well-small">
      <ul class="nav nav-list">
        <li class="nav-header">Settings</li>
        <li ng-class="{ active: $state.includes('app.settings.details')}"><a ui-sref="app.settings.details" >User Details</a></li>
        <li ng-class="{ active: $state.includes('app.settings.quotes')}"><a ui-sref="app.settings.quotes" >User Quotes</a></li>
      </ul>
      <hr>
    </div>
  </div>
  <div class="col-sm-9" ui-view></div>
</div>
{% endraw %}{% endhighlight %}

There are two submodules here too: [details](https://github.com/benschw/ui-router-demo/blob/master/app/scripts/settings/details/details.js) and [quotes](https://github.com/benschw/ui-router-demo/blob/master/app/scripts/settings/quotes/quotes.js). For such a trivial example, these could have been part of the settings module (but still constitute unique states), but I wanted to abstract them out to show how you could organize a more complex settings section.

These states piggyback on the `app.settings` state to supply content for the abstract settings' default ui-view. They also leverage the `SettingsController` defined in the settings module (since both states show a different view of the same user data resource.)

`app.settings.details`
{% highlight javascript %}{% raw %}
'use strict';

angular
  .module('app.settings.details', [
    'ui.router',
    "app.settings"
  ])
  .config(['$stateProvider', function($stateProvider) {

      var details = {
          name: 'app.settings.details',
          url: '/',
          views: {
            '': {
              templateUrl: 'scripts/settings/details/details.html',
              controller: 'SettingsController'
            }
          }
      };

      $stateProvider.state(details);

  }]);
{% endraw %}{% endhighlight %}

`details.html`
{% highlight html %}{% raw %}
<h3>{{user.name}}'s Details</h3>
<hr>
<div class="form-group"><label>Name</label><input class="form-control" type="text" ng-model="user.name" /></div>
<div class="form-group"><label>Email</label><input class="form-control" type="text" ng-model="user.email" /></div>

<button class="btn btn-default" ng-click="done()">Save</button>
{% endraw %}{% endhighlight %}


`app.settings.quotes`
{% highlight javascript %}{% raw %}
'use strict';

angular
  .module('app.settings.quotes', [
    'ngResource',
    'ngRoute',
    'ui.router',
    "app.settings"
  ])
  .config(['$stateProvider', function($stateProvider) {

      var quotes = {
          name: 'app.settings.quotes',
          url: '/quotes',
          views: {
            '': {
              templateUrl: 'scripts/settings/quotes/quotes.html',
              controller: 'SettingsController'
            }
          }
      };

      $stateProvider.state(quotes);

  }]);
{% endraw %}{% endhighlight %}

`quotes.html`
{% highlight html %}{% raw %}
<h3>{{user.name}}'s Quotes</h3>
<hr>

<div class="form-group">
  <label>Quotes</label>
  <textarea class="form-control" type="text" ng-model="user.quotes"></textarea>
</div>
listlist
<button class="btn btn-default" ng-click="done()">Save</button>
{% endraw %}{% endhighlight %}

## Conclusion

And there you have it!

ui-router allows you to implement your app more naturally: as a composition of views. No longer do you need to recast how your app is logically structured into a hierarchy or set of unique pages with shared content.